package lee.common.util;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.Format;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class ExcelLoadXlsAdapter {
	private int columnCount;
	/**
	 * 엑셀 파일을 읽어서 xml 데이터 파일과 타이틀 파일 생성
	 * 
	 * @param path		excel file path
	 * @param storage	파일 저장 위치
	 * @return
	 * @throws Exception 
	 */
	public boolean readExcel(String path, String storage) 
			throws Exception {
	
		File file = new File(path);
		String sourceFile = file.getName();
		
		POIFSFileSystem fileSystem = new POIFSFileSystem(new FileInputStream(file));

		HSSFWorkbook work = new HSSFWorkbook(fileSystem);

		/**
		 * output : 
		 *  excelfileName_sheetNo.xml
		 *  excelfileName_sheetNo.title
		 */
		int sheetNum = work.getNumberOfSheets();
		System.out.println("\n# sheet num : " + sheetNum);
		
		for (int loop = 0; loop < 1; loop++) {
			HSSFSheet sheet = work.getSheetAt(loop);
			/**
			 * 저장할 xml 파일 명 설정
			 */
			String fileName = sourceFile +"_"+loop+".title";
			System.out.println("xml file Name : " + fileName);
			
			/**
			 * 헤더 먼저 처리
			 */
			HSSFRow row = sheet.getRow(0);
			createFile(fileName, storage, doHeader(sheet, row).toString());
			/**
			 * 실제 데이터를 XML로 처리
			 */
			fileName = sourceFile +"_"+loop+".xml";
			doXMLData(sheet, fileName, storage);
		}
		return true;
	}
	/**
	 * 엑셀 파일을 읽어서 xml 데이터 파일과 타이틀 파일 생성
	 * 
	 * @param path		excel file path
	 * @param storage	파일 저장 위치
	 * @return
	 * @throws Exception 
	 */
	public boolean readExcel(String path) 
			throws Exception {
	
		File file = new File(path);
		String sourceFile = file.getName();
		
		POIFSFileSystem fileSystem = new POIFSFileSystem(new FileInputStream(file));

		HSSFWorkbook work = new HSSFWorkbook(fileSystem);
		
		int sheetNum = work.getNumberOfSheets();
		System.out.println("\n# sheet num : " + sheetNum);
		/**
		 * process just first sheet
		 */
		for (int loop = 0; loop < 1; loop++) {
			HSSFSheet sheet = work.getSheetAt(loop);			
			/**
			 * get second row data
			 */
			HSSFRow row = sheet.getRow(1);
			
			StringBuffer rowValue = new StringBuffer("");
			
			if (row != null) {
				
				columnCount = row.getLastCellNum();
				//rowValue.append("{");
		
				StringBuffer temp = new StringBuffer("");
				StringBuffer width = new StringBuffer("");
				
				for (int cellnum = 0; cellnum < columnCount; cellnum++) {
					HSSFCell cell = row.getCell(cellnum);

					width.append(String.valueOf(widthUnits2Pixel(sheet.getColumnWidth(cellnum))) + ",");
					
					if (cell != null) {
						if (HSSFCell.CELL_TYPE_NUMERIC == cell.getCellType()) {
							temp.append((int)cell.getNumericCellValue());
							
						} else if (HSSFCell.CELL_TYPE_STRING == cell.getCellType() ){
							temp.append(cell.getStringCellValue().replaceAll("\n", "<br>"));
						} else if (HSSFCell.CELL_TYPE_BLANK == cell.getCellType()) {
							 //CellRangeAddress cr = sheet.getMergedRegion(cellnum);
							 //int col = cr.getFirstColumn();
							 
						} else {
							temp.append("");
						}
						temp.append(",");
					}
				}
				width.deleteCharAt(width.length()-1);
				temp.deleteCharAt(temp.length()-1);
				
				rowValue.append(temp);
				//rowValue.append("}]}");
				
				/*
				System.out.println("----------------------------------------------------------------");
				System.out.println("width");
				System.out.println("----------------------------------------------------------------");
				System.out.println(width);
				*/
			}
			/*	
			System.out.println("----------------------------------------------------------------");
			System.out.println("Title");
			System.out.println("----------------------------------------------------------------");
			System.out.println(rowValue);
			*/
		}
		return true;
	}
	/**
	 * reset excel title
	 * 
	 * 1. update title_info table
	 * 2. restruct source_data table
	 *  
	 * @param titles
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 * @throws IllegalAccessException 
	 * @throws InstantiationException 
	 */
	public boolean updateTitle(String [] titles) throws ClassNotFoundException, SQLException {
		
		Connection conn = getConnection();
		/**
		 * prepare for batch exception
		 */
        conn.setAutoCommit(false);
        /**
         * remove existing data
         */
        Statement stmt;
		try {
			stmt = conn.createStatement();
	        stmt.execute("delete from tb_title_info");
		} catch (SQLException e1) {
			e1.printStackTrace();
			conn.rollback();
			return false;
		}
		
        /**
         * insert new data
         */
        PreparedStatement pStmt = 
            conn.prepareStatement("insert into tb_title_info (col_index, col_name) values (?, ?)");

        for (int i=0; i<titles.length; i++) { 
            pStmt.setInt(1, i);
            pStmt.setString(2, titles[i]);
            pStmt.addBatch();
        }
        
        int[] totalInserted = new int[100];
        
        try {
			totalInserted = pStmt.executeBatch();
        } catch(BatchUpdateException e) {
            totalInserted = e.getUpdateCounts();
            conn.rollback();
        } catch (SQLException e) {
			e.printStackTrace();
			conn.rollback();
		}
        
        System.out.println (totalInserted.length);
        conn.commit();
        
        stmt.close();
        pStmt.close();
        
        return true;
	}
	
	/**
	 * update source_data table with recent excel file
	 * 1. delete source_data table
	 * 2. insert new data into source_data table
	 * 
	 * @return
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public boolean updateData(String path) 
			throws ClassNotFoundException, SQLException, FileNotFoundException, IOException {
		
		Connection conn = getConnection();
		
		/**
		 * prepare for batch exception
		*/
		conn.setAutoCommit(false);
        
		/**
         * remove existing data
        */
        
        Statement stmt;
        
        /*
		 * 2013.04.20, excel파일 파싱 에러시 기존 데이터를 모두 삭제 하기 때문에  임시 테이블에   저장 후 
		 *             모드 작업 끝나고 나서 본 테이블에  저장 한다.
		 * */
        System.out.println("********** 1. temp table deleting start *************");
        try {
			stmt = conn.createStatement();
	        stmt.execute("delete from tb_excel_data_temp");
		} catch (SQLException e1) {
			e1.printStackTrace();
			conn.rollback();
			return false;
		}
		System.out.println("********** 2. temp table deleting end *************");
		/*
		 * 2013.03.25, 2008필드(f9)가 2013필드로 변경되고 위치 변경됨
		 * */
		StringBuffer insertSqlBuf = new StringBuffer()
			.append("insert into tb_excel_data_temp ")
			.append("(f1,f2,f3,f4,f5,f6,f7,f8,f10,f11,f12,f13,f14,f9,f15,f16,f17,f18,f19)")
			.append(" values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
		
        /**
         * insert new data
         */
        PreparedStatement pStmt = 
            conn.prepareStatement(insertSqlBuf.toString());

        File file = new File(path);
		//String sourceFile = file.getName();
		
		POIFSFileSystem fileSystem = new POIFSFileSystem(new FileInputStream(file));

		HSSFWorkbook work = new HSSFWorkbook(fileSystem);
		/**
		 * process just 1st sheet
		 */
		
		for (int loop = 0; loop < 1; loop++) {
			HSSFSheet sheet = work.getSheetAt(loop);
			int rows = sheet.getPhysicalNumberOfRows();
			HSSFRow row = null;
			String cellData = "";
			/**
			 * get data from 3th row
			 */
			for (int rownum = 2; rownum < rows; rownum++) {
				row = sheet.getRow(rownum);
				
				if (row != null) {
					Format formatter = new DecimalFormat("0.##");
					int colCount = row.getLastCellNum();
					
					for (int cellnum = 0; cellnum < colCount; cellnum++) {
						HSSFCell cell = row.getCell(cellnum);
						//System.out.println(cellnum+1);
						if (cell != null) {
							int cellType = cell.getCellType();
							/**
							 * data column
							 */
							if (0 == cellnum) {
								/**
								 * nobel77 : need check
								 */
								cellData = numericToDateFormat(cell.getNumericCellValue()).toString();
								pStmt.setString(cellnum+1, cellData);
							} else {
								switch (cellType) {

								case HSSFCell.CELL_TYPE_NUMERIC:
									cellData = ""+formatter.format(cell.getNumericCellValue());
									break;
								case HSSFCell.CELL_TYPE_STRING:
									cellData = cell.getStringCellValue();
									cellData = cellData.replaceAll("\n", "<br>");
									break;
								 case HSSFCell.CELL_TYPE_FORMULA :
							          cellData = ""+formatter.format(cell.getNumericCellValue());
							          break;	
								default:
									//cellData = "&nbsp";
									cellData = "";
									break;
								}

								pStmt.setString(cellnum+1, cellData);
							}
						} else {
							//cellData = "&nbsp";
							cellData = "";
							pStmt.setString(cellnum+1, cellData);
						}
					}
					
					pStmt.addBatch();
				}
			}
		}
        int[] totalInserted = new int[5000];
        
        System.out.println("********** 3. excel file loading IN temp table start *************");
        
        try {
			totalInserted = pStmt.executeBatch();
        } catch(BatchUpdateException e) {
			e.printStackTrace();
            totalInserted = e.getUpdateCounts();
            conn.rollback();
        } catch (SQLException e) {
			e.printStackTrace();
			conn.rollback();
		} 
        
        System.out.println("********** 4. excel file loading IN temp table end. TOTAL COUNT : " +  totalInserted.length + " *************");
        
        System.out.println("********** 5. DATA loading IN REAL TABLE START *************");
        
        try {
			stmt = conn.createStatement();
	        stmt.execute("delete from tb_excel_data");
	        stmt.execute("INSERT INTO tb_excel_data SELECT * FROM tb_excel_data_temp");
	        
		} catch (SQLException e1) {
			e1.printStackTrace();
			conn.rollback();
			return false;
		}
		
		   System.out.println("********** 6. DATA loading IN REAL TABLE END *************");
		
        conn.commit();
        
        stmt.close();
        pStmt.close();
        conn.close();
        
        return true;
	}
	
	/**
	 * 엑셀 파일의 첫 행을 타이틀 정보로 구분하여 처리
	 * 
	 * JSON format:
	 * {"title":
		[
		 {"title1","title2","title3",...}
		]
	   }
	   
	 * @param sheet
	 * @param headerRow
	 */
	private StringBuffer doHeader(HSSFSheet sheet, HSSFRow headerRow) {
//		StringBuffer rowValue = new StringBuffer("{\"titles\":[");
		StringBuffer rowValue = new StringBuffer("");
		
		if (headerRow != null) {
			
			columnCount = headerRow.getLastCellNum();
			//rowValue.append("{");
	
			StringBuffer temp = new StringBuffer("");
			StringBuffer width = new StringBuffer("");
			
			for (int cellnum = 0; cellnum < columnCount; cellnum++) {
				HSSFCell cell = headerRow.getCell(cellnum);

				width.append(String.valueOf(widthUnits2Pixel(sheet.getColumnWidth(cellnum))) + ",");
				
				if (cell != null) {
					//temp.append("\"");
					if (HSSFCell.CELL_TYPE_NUMERIC == cell.getCellType()) {
						temp.append((int)cell.getNumericCellValue());
						
					} else if (HSSFCell.CELL_TYPE_STRING == cell.getCellType() ){
						temp.append(cell.getStringCellValue().replaceAll("\n", "<br>"));
					} else {
						temp.append("");
					}
					//temp.append("\",");
					temp.append(",");
				}
			}
			width.deleteCharAt(width.length()-1);
			temp.deleteCharAt(temp.length()-1);
			
			rowValue.append(temp);
			//rowValue.append("}]}");
			
			/*
			System.out.println("----------------------------------------------------------------");
			System.out.println("width");
			System.out.println("----------------------------------------------------------------");
			System.out.println(width);
			*/
		}
		/*
		System.out.println("----------------------------------------------------------------");
		System.out.println("Title");
		System.out.println("----------------------------------------------------------------");
		System.out.println(rowValue);
		*/
		
		return rowValue;
	}
	/**
	 * XML 데이터 만들기
	 * @param sheet
	 * @return
	 */
	private StringBuffer doXMLData(HSSFSheet sheet, String fileName, String storage) throws Exception {
		/*
		 <?xml version="1.0" encoding="UTF-8"?>
		 <rows> 
		   <row id="1001"> 
		   <cell>100</cell> 
		   <cell>AN:apple</cell> 
		   <cell>John Grisham</cell> 
		   <cell>12.99</cell> 
		   <cell>1</cell> 
		   <cell>05/01/1998</cell> 
		   </row>
		  </rows>
		*/
		String cellData = "";
		String filePath = storage + File.separator + fileName;
		int rows = sheet.getPhysicalNumberOfRows();
		HSSFRow row = null;
		
		DocumentBuilderFactory docFactory = DocumentBuilderFactory
				.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

		// 루트 엘리먼트
		Document doc = docBuilder.newDocument();
		Element rootElement = doc.createElement("rows");
		doc.appendChild(rootElement);
		
		for (int rownum = 1; rownum < rows; rownum++) {
			row = sheet.getRow(rownum);
			
			if (row != null) {
				//int cells = row.getPhysicalNumberOfCells();
				//int columnCount = row.getLastCellNum();
				StringBuffer rowValue = new StringBuffer("");
				rowValue.append("{");
				
				StringBuffer temp = new StringBuffer("");
				
				System.out.println("rownum : " + rownum);
				System.out.println("column count : " + columnCount);
				
				// row 엘리먼트
				Element rowElement = doc.createElement("row");
				rootElement.appendChild(rowElement);
				rowElement.setAttribute("id", String.valueOf(rownum));

				Format formatter = new DecimalFormat("0.##");

				for (int cellnum = 0; cellnum < columnCount; cellnum++) {
					HSSFCell cell = row.getCell(cellnum);
					Element cellElement = doc.createElement("cell");
					
					if (cell != null) {
						int cellType = cell.getCellType();
						
						/**
						 * 날짜 칼럼
						 */
						if (0 == cellnum) {
							/**
							 * nobel77 : need check
							 */
							cellData = numericToDateFormat(cell.getNumericCellValue()).toString();
							cellElement.appendChild(doc.createTextNode(cellData));
						} else {
							switch (cellType) {

							case HSSFCell.CELL_TYPE_NUMERIC:
								cellData = ""+formatter.format(cell.getNumericCellValue());
								//cellData = ""+Double.parseDouble(formatter.format(cell.getNumericCellValue()));
								cellElement.appendChild(doc.createTextNode(cellData));
								break;
							case HSSFCell.CELL_TYPE_STRING:
								cellData = cell.getStringCellValue();
								cellData = cellData.replaceAll("\n", "<br>");
								cellElement.appendChild(doc.createCDATASection(cellData));
								break;
							default:
								cellData = "&nbsp";
								cellElement.appendChild(doc.createCDATASection(cellData));
								break;
							}
						}
					} else {
						cellData = "&nbsp";
						cellElement.appendChild(doc.createCDATASection(cellData));
					}
					//System.out.println("data: " + cellData);
					rowElement.appendChild(cellElement);

				}
				rootElement.appendChild(rowElement);
			}
		}
		// XML 파일로 쓰기
		TransformerFactory transformerFactory = TransformerFactory
				.newInstance();
		Transformer transformer = transformerFactory.newTransformer();

		transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
		transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new FileOutputStream(
				new File(filePath)));

		transformer.transform(source, result);
		/*
		 <?xml version="1.0" encoding="UTF-8"?>
		 <rows> 
		   <row id="1001"> 
		   <cell>100</cell> 
		   <cell>AN:apple</cell> 
		   <cell>John Grisham</cell> 
		   <cell>12.99</cell> 
		   <cell>1</cell> 
		   <cell>05/01/1998</cell> 
		   </row>
		  </rows>
		*/
		return new StringBuffer("");
	}
	/**
	 * 
	 * @param numericCellValue	(1)231.0 3~4자리 날짜 포맷
	 * @return
	 */
	private StringBuffer numericToDateFormat(double numericCellValue) {

		StringBuffer date = new StringBuffer(String.valueOf(numericCellValue));
		//System.out.println("before : " + date);
		int len = date.length();

		/**
		 * delete 함수의 두번째 인자는 1부터 시작
		 */
		StringBuffer sb = date.delete(len-2, len);
		/**
		 * 10월 미만인 경우 0을 앞에 추가
		 */
		if (3 == date.length()) {
			date.insert(0,'0');
		}
		
		date.insert(2,'/');
		//System.out.println("after : " + date);
		return date;
	}
	/**
	 * 
	 * @param fileName	tile file name
	 * @param storage	tile file path(접속 유저별 저장소)
	 * @param content	
	 */
	private void createFile(String fileName, String storage, String content) {
		String filePath = storage + File.separator + fileName;
		try {
			File d = new File(storage);

			if (!d.isDirectory()) {
				if (!d.mkdirs()) {
				}
			}

			BufferedWriter out = new BufferedWriter(new FileWriter(filePath));

			out.write(content);
			out.close();
		} catch (IOException e) {
			System.err.println(e);
		}
	}

	public static final short EXCEL_COLUMN_WIDTH_FACTOR = 256;
	public static final int UNIT_OFFSET_LENGTH = 7;

	public static int widthUnits2Pixel(int widthUnits) {
		int pixels = (widthUnits / EXCEL_COLUMN_WIDTH_FACTOR)
				* UNIT_OFFSET_LENGTH;
		int offsetWidthUnits = widthUnits % EXCEL_COLUMN_WIDTH_FACTOR;
		pixels += Math.floor((float) offsetWidthUnits
				/ ((float) EXCEL_COLUMN_WIDTH_FACTOR / UNIT_OFFSET_LENGTH));
		return pixels;
	}
	
	public Connection getConnection(){
	    
	   Connection conn = null;
    
	    try{
			
		   	Context initCnt = new InitialContext();
		   	Context env = (Context) initCnt.lookup("java:comp/env/");
		   	DataSource ds = (DataSource) env.lookup("jdbc/jndi_lee");
		   	
	        /*
	        String DB_DRIVER = "org.gjt.mm.mysql.Driver" ;
	        String DB_URL = "jdbc:mysql://localhost:3306/hissfdb";              
	        String DB_USER = "hissf";                                      
	        String DB_PASSWORD= "wkdgkrwoeks20!!";                                   
	    	*/
	        //Class.forName(DB_DRIVER);  
	        //conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
	        conn = ds.getConnection();
        
	   }catch(Exception e){
                
         System.out.println(e.toString());

	   }
      
        return conn ;      
   	}
}
